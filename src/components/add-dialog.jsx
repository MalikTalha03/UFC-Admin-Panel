/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/04kca73sBA1
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import { useEffect, useState } from "react";
import { z } from "zod";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from "@/components/ui/dialog";
import { Label } from "@/components/ui/label";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import {
  Command,
  CommandInput,
  CommandEmpty,
  CommandItem,
  CommandGroup,
  CommandList,
} from "@/components/ui/command";
import { Calendar } from "@/components/ui/calendar";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";

// Define the validation schema using Zod
const matchSchema = z.object({
  player1Name: z.string().min(1, "Select the home team"),
  player2Name: z.string().min(1, "Select the away team"),
  date: z.string().min(1, "Select the match date"),
  time: z.object({
    hour: z.string().min(1, "Select hour"),
    minute: z.string().min(0, "Select minute"),
  }),
});

export function AddDialog({ open, onChange }) {
  const [selectedteam1, setSelectedteam1] = useState("");
  const [selectedteam2, setSelectedteam2] = useState("");
  const [selectedDate, setSelectedDate] = useState("");
  const [selectedTime, setSelectedTime] = useState({ hour: "", minute: "" });
  const [isteam1DropdownOpen, setIsteam1DropdownOpen] = useState(false);
  const [isteam2DropdownOpen, setIsteam2DropdownOpen] = useState(false);
  const [isDateDropdownOpen, setIsDateDropdownOpen] = useState(false);
  const [isTimeDropdownOpen, setIsTimeDropdownOpen] = useState(false);
  const [Teams, setTeams] = useState([]);

  useEffect(() => {
    fetchTeams().then((data) => {
      setTeams(data);
    });
  }, []);

  const fetchTeams = async () => {
    try {
      const response = await fetch("/api/players");
      if (!response.ok) throw new Error("Network response was not ok");
      const data = await response.json();
      return data;
    } catch (error) {
      console.error("Failed to fetch teams", error);
      return [];
    }
  };

  const handleTeamSelect = (setter, isOpenSetter) => (team) => {
    setter(team);
    isOpenSetter(false);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const result = matchSchema.safeParse({
      player1Name: selectedteam1,
      player2Name: selectedteam2,
      date: selectedDate,
      time: selectedTime,
    });

    if (!result.success) {
      console.error(result.error);
      alert(
        "Validation failed: " +
          result.error.issues.map((issue) => issue.message).join(", ")
      );
      return;
    }

    // Replace '/api/matches' with your actual endpoint
    try {
      const response = await fetch("/api/matches", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(result.data),
      });

      if (response.ok) {
        console.log("Match saved successfully!");
        alert("Match saved successfully!");
        onChange();
      }
    } catch (error) {
      console.error("Failed to save match", error);
      alert("Failed to submit match: " + error.message);
    }
  };

  return (
    <Dialog open={open} onOpenChange={onChange}>
      <DialogContent className="sm:max-w-[500px]">
        <DialogHeader>
          <DialogTitle>Add New Match</DialogTitle>
          <DialogDescription>
            Enter the details of the upcoming match.
          </DialogDescription>
        </DialogHeader>
        <div className="grid gap-4 py-4">
          {/* Team selection sections */}
          <div className="grid grid-cols-2 items-center gap-4">
            <Label className="text-right" htmlFor="home-team">
              Home Team
            </Label>
            <Popover
              open={isteam1DropdownOpen}
              onOpenChange={setIsteam1DropdownOpen}
            >
              <PopoverTrigger asChild>
                <Button
                  className="w-full justify-start text-left font-normal"
                  id="home-team"
                  variant="outline"
                  onClick={() => setIsteam1DropdownOpen(!isteam1DropdownOpen)}
                >
                  <SearchIcon className="mr-2 h-4 w-4" />
                  {selectedteam1 || "Select Home Team"}
                </Button>
              </PopoverTrigger>
              <PopoverContent align="start" className="w-[300px] p-0">
                <Command>
                  <CommandInput className="h-9" placeholder="Search teams..." />
                  <CommandEmpty>No teams found.</CommandEmpty>
                  <CommandGroup>
                    <CommandList>
                      {Teams.map((team) => (
                        <CommandItem
                          key={team._id}
                          onSelect={() =>
                            handleTeamSelect(
                              setSelectedteam1,
                              setIsteam1DropdownOpen
                            )(team.name)
                          }
                        >
                          {team.name}
                        </CommandItem>
                      ))}
                    </CommandList>
                  </CommandGroup>
                </Command>
              </PopoverContent>
            </Popover>
          </div>
          <div className="grid grid-cols-2 items-center gap-4">
            <Label className="text-right" htmlFor="away-team">
              Away Team
            </Label>
            <Popover
              open={isteam2DropdownOpen}
              onOpenChange={setIsteam2DropdownOpen}
            >
              <PopoverTrigger asChild>
                <Button
                  className="w-full justify-start text-left font-normal"
                  id="away-team"
                  variant="outline"
                  onClick={() => setIsteam2DropdownOpen(!isteam2DropdownOpen)}
                >
                  <SearchIcon className="mr-2 h-4 w-4" />
                  {selectedteam2 || "Select Away Team"}
                </Button>
              </PopoverTrigger>
              <PopoverContent align="start" className="w-[300px] p-0">
                <Command>
                  <CommandInput className="h-9" placeholder="Search teams..." />
                  <CommandEmpty>No teams found.</CommandEmpty>
                  <CommandGroup>
                    <CommandList>
                      {Teams.map((team) => (
                        <CommandItem
                          key={team._id}
                          onSelect={() =>
                            handleTeamSelect(
                              setSelectedteam2,
                              setIsteam2DropdownOpen
                            )(team.name)
                          }
                        >
                          {team.name}
                        </CommandItem>
                      ))}
                    </CommandList>
                  </CommandGroup>
                </Command>
              </PopoverContent>
            </Popover>
          </div>

          {/* Date and Time selection sections */}
          <div className="grid grid-cols-2 items-center gap-4">
            <Label className="text-right" htmlFor="match-date">
              Match Date
            </Label>
            <Popover open={isDateDropdownOpen}>
              <PopoverTrigger asChild>
                <Button
                  className="w-full justify-start text-left font-normal"
                  id="match-date"
                  variant="outline"
                  onClick={() => setIsDateDropdownOpen(!isDateDropdownOpen)}
                >
                  <CalendarDaysIcon className="mr-2 h-4 w-4" />
                  {selectedDate || "Select Date"}
                </Button>
              </PopoverTrigger>
              <PopoverContent align="start" className="w-auto p-0">
                <Calendar
                  initialFocus
                  mode="single"
                  onSelect={(date) => {
                    setSelectedDate(date.toLocaleDateString());
                    setIsDateDropdownOpen(false);
                  }}
                />
              </PopoverContent>
            </Popover>
          </div>
          <div className="grid grid-cols-2 items-center gap-4">
            <Label className="text-right" htmlFor="match-time">
              Match Time
            </Label>
            <Popover
              open={isTimeDropdownOpen}
              onOpenChange={setIsTimeDropdownOpen}
            >
              <PopoverTrigger asChild>
                <Button
                  className="w-full justify-start text-left font-normal"
                  id="match-time"
                  variant="outline"
                  onClick={() => setIsTimeDropdownOpen(!isTimeDropdownOpen)}
                >
                  <ClockIcon className="mr-2 h-4 w-4" />
                  {selectedTime.hour || selectedTime.minute
                    ? `${selectedTime.hour.padStart(
                        2,
                        "0"
                      )}:${selectedTime.minute.padStart(2, "0")}`
                    : "Select Time"}
                </Button>
              </PopoverTrigger>
              <PopoverContent align="start" className="w-auto p-0">
                <div className="grid grid-cols-2 gap-4">
                  <Select
                    onValueChange={(hour) => {
                      setSelectedTime((prevTime) => ({ ...prevTime, hour }));
                      setIsTimeDropdownOpen(false);
                    }}
                  >
                    <SelectTrigger className="w-full">
                      <SelectValue placeholder="Hour" />
                    </SelectTrigger>
                    <SelectContent>
                      {Array.from({ length: 24 }, (_, i) => (
                        <SelectItem key={i} value={i.toString()}>
                          {i}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  <Select
                    onValueChange={(minute) => {
                      setSelectedTime((prevTime) => ({ ...prevTime, minute }));
                      setIsTimeDropdownOpen(false);
                    }}
                  >
                    <SelectTrigger className="w-full">
                      <SelectValue placeholder="Minute" />
                    </SelectTrigger>
                    <SelectContent>
                      {[
                        "00",
                        "05",
                        "10",
                        "15",
                        "20",
                        "25",
                        "30",
                        "35",
                        "40",
                        "45",
                        "50",
                        "55",
                      ].map((min) => (
                        <SelectItem key={min} value={min}>
                          {min}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </PopoverContent>
            </Popover>
          </div>
        </div>
        <DialogFooter>
          <Button type="button" onClick={handleSubmit}>
            Save Match
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}

function CalendarDaysIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M8 2v4" />
      <path d="M16 2v4" />
      <rect width="18" height="18" x="3" y="4" rx="2" />
      <path d="M3 10h18" />
      <path d="M8 14h.01" />
      <path d="M12 14h.01" />
      <path d="M16 14h.01" />
      <path d="M8 18h.01" />
      <path d="M12 18h.01" />
      <path d="M16 18h.01" />
    </svg>
  );
}

function ClockIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <circle cx="12" cy="12" r="10" />
      <polyline points="12 6 12 12 16 14" />
    </svg>
  );
}

function SearchIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <circle cx="11" cy="11" r="8" />
      <path d="m21 21-4.3-4.3" />
    </svg>
  );
}
